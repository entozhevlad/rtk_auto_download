import oracledb as ora
import logging
import csv
from decouple import config
import sys
import os
import re

# Учетные данные для подключения к базе данных
try:
    username = config("DB_USERNAME")
    password = config("DB_PASSWORD")
    dsn = config("DB_DSN")
except Exception as e:
    logging.error(f"Ошибка при чтении учетных данных: {e}")
    sys.exit(1)


def set_cfg_ora_clnt():
    try:
        if sys.platform.startswith("linux"):
            ora.defaults.config_dir = os.path.join(os.environ.get("HOME"), "instantclient_21_10")
        elif sys.platform.startswith("win32"):
            ora.defaults.config_dir = (r"C:\oracle\instantclient_21_10\network\admin")
    except Exception as err:
        logging.error("Ошибка инициализации Oracle-клиента!")
        logging.error(err)
        sys.exit(1)
    return ora.defaults.config_dir


def create_temp_table():
    """
    Создает временную таблицу для хранения данных из CSV файла.

    Действия:
    1. Подключается к базе данных.
    2. Удаляет таблицу temp_csv_data, если она существует.
    3. Создает новую таблицу temp_csv_data с заданной структурой.
    4. Записывает результат в лог и выводит сообщение на экран в случае ошибки.
    """
    connection = None
    cursor = None
    try:
        connection = ora.connect(user=username, password=password, dsn=dsn)
        cursor = connection.cursor()

        drop_table_sql = """
            BEGIN
                EXECUTE IMMEDIATE 'DROP TABLE temp_csv_data';
            EXCEPTION
                WHEN OTHERS THEN
                    IF SQLCODE != -942 THEN
                        RAISE;
                    END IF;
            END;
            """
        cursor.execute(drop_table_sql)
        logging.info("Существующая таблица удалена, если она была")

        create_table_sql = """
            CREATE TABLE temp_csv_data ( 
                id NUMBER GENERATED BY DEFAULT AS IDENTITY,
                prefix VARCHAR2(10),
                start_range VARCHAR2(10),
                end_range VARCHAR2(10),
                capacity NUMBER,
                operator VARCHAR2(255),
                region VARCHAR2(255),
                territory VARCHAR2(255),
                inn VARCHAR2(12)
            )
            """
        cursor.execute(create_table_sql)
        logging.info("Таблица для данных CSV создана")

    except ora.DatabaseError as e:
        error, = e.args
        logging.error(f"Ошибка базы данных: {error.code}, {error.message}")
        print(f"Ошибка базы данных: {error.code}, {error.message}")
    except Exception as e:
        logging.error(f"Ошибка: {e}")
        print(f"Ошибка: {e}")
    finally:
        if cursor is not None:
            cursor.close()
        if connection is not None:
            connection.close()


def is_safe_csv_file(csv_path):
    """
    Проверяет CSV файл на наличие подозрительных паттернов.

    Параметры:
    csv_path (str): Путь к CSV файлу.

    Возвращает:
    bool: True, если файл безопасен, иначе False.
    """
    suspicious_patterns = [
        r"\bSELECT\b", r"\bINSERT\b", r"\bUPDATE\b", r"\bDELETE\b",
        r"\bDROP\b", r"\bCREATE\b", r"\bALTER\b", r"\bEXEC\b", r"\bEVAL\b",
        r"\bos\.", r"\bsys\.", r"\bINTO OUTFILE\b", r"\bUNION\b", r"\bJOIN\b",
        r"\bWHERE\b", r"\bEXECUTE IMMEDIATE\b"
    ]

    safe = True

    try:
        with open(csv_path, newline='', encoding='utf-8') as csvfile:
            csvreader = csv.DictReader(csvfile, delimiter=';')

            for row in csvreader:
                for field_name, field_value in row.items():
                    for pattern in suspicious_patterns:
                        if re.search(pattern, field_value, flags=re.IGNORECASE):
                            logging.warning(f"Подозрительный паттерн найден в поле '{field_name}': {field_value}")
                            safe = False

    except Exception as e:
        logging.error(f"Ошибка при проверке CSV-файла: {e}")
        safe = False

    if safe:
        logging.info("CSV-файл прошел проверку на безопасность")
    else:
        logging.error("Обнаружены подозрительные паттерны в CSV-файле")

    return safe


def insert_csv_data(file_path):
    """
    Загружает данные из CSV файла в таблицу temp_csv_data.

    Параметры:
    file_path (str): Путь к файлу CSV, который нужно загрузить.

    Действия:
    1. Проверяет, что файл существует и является CSV.
    2. Проверяет файл на наличие подозрительных паттернов.
    3. Подключается к базе данных.
    4. Читает данные из CSV файла.
    5. Пакетно вставляет данные в таблицу temp_csv_data.
    6. Записывает результат в лог и выводит сообщение на экран в случае ошибки.
    """
    if not os.path.isfile(file_path):
        logging.error(f"Файл {file_path} не существует.")
        print(f"Файл {file_path} не существует.")
        return

    if not file_path.lower().endswith('.csv'):
        logging.error(f"Файл {file_path} не является CSV файлом.")
        print(f"Файл {file_path} не является CSV файлом.")
        return

    if not is_safe_csv_file(file_path):
        logging.error("CSV файл не прошел проверку на безопасность.")
        print("CSV файл не прошел проверку на безопасность.")
        return

    connection = None
    cursor = None
    try:
        connection = ora.connect(user=username, password=password, dsn=dsn)
        cursor = connection.cursor()

        with open(file_path, newline='', encoding='utf-8') as csvfile:
            csv_reader = csv.reader(csvfile, delimiter=';')
            next(csv_reader)  # Пропускаем заголовок, если он есть
            batch_size = 10000
            sql = "INSERT INTO temp_csv_data (prefix, start_range, end_range, capacity, operator, region, territory, inn) VALUES (:1, :2, :3, :4, :5, :6, :7, :8)"
            data = []
            for line in csv_reader:
                if len(line) >= 8:  # Проверка на минимальное количество элементов в строке
                    prefix, start_range, end_range, capacity, operator, region, territory, inn = line
                    try:
                        start_range = int(start_range)
                        end_range = int(end_range)
                        capacity = int(capacity)
                        data.append((prefix, start_range, end_range, capacity, operator, region, territory, inn))
                    except ValueError:
                        logging.warning(f"Неверный формат данных в строке: {line}")
                        continue

                    if len(data) % batch_size == 0:
                        cursor.executemany(sql, data)
                        data = []

            if data:
                cursor.executemany(sql, data)

        connection.commit()
        logging.info(f"Данные из файла {file_path} успешно загружены в базу данных")

    except ora.DatabaseError as e:
        error, = e.args
        logging.error(f"Ошибка базы данных: {error.code}, {error.message}")
        print(f"Ошибка базы данных: {error.code}, {error.message}")
    except ora.InterfaceError as e:
        logging.error(f"Ошибка подключения к базе данных: {e}")
        print(f"Ошибка подключения к базе данных: {e}")
    except FileNotFoundError as e:
        logging.error(f"Файл не найден: {e}")
        print(f"Файл не найден: {e}")
    except Exception as e:
        logging.error(f"Ошибка при загрузке данных из файла: {e}")
        print(f"Ошибка при загрузке данных из файла: {e}")
    finally:
        if cursor is not None:
            cursor.close()
        if connection is not None:
            connection.close()

def get_drct_id(name_csv):
    """
    Выполняет SQL-запрос для получения DRCT_DRCT_ID по указанному NAME_CSV.

    Параметры:
    name_csv (str): Значение NAME_CSV для поиска.

    Возвращает:
    list: Список результатов запроса.
    """
    connection = None
    cursor = None
    result = []

    try:
        connection = ora.connect(user=username, password=password, dsn=dsn)
        cursor = connection.cursor()

        query = "SELECT DRCT_DRCT_ID FROM BIS.TEASR_PREFIX_DIRECTIONS WHERE NAME_CSV = :name_csv"
        cursor.execute(query, name_csv=name_csv)

        result = cursor.fetchall()

    except ora.DatabaseError as e:
        error, = e.args
        logging.error(f"Ошибка базы данных: {error.code}, {error.message}")
        print(f"Ошибка базы данных: {error.code}, {error.message}")
    except Exception as e:
        logging.error(f"Ошибка: {e}")
        print(f"Ошибка: {e}")
    finally:
        if cursor is not None:
            cursor.close()
        if connection is not None:
            connection.close()

    return result

def get_all_msisdn():
    """
    Получает все строки из таблицы TEASR_PREFIX_MSISDN.

    Возвращает:
    list: Список кортежей с результатами запроса.
    """
    connection = None
    cursor = None
    try:
        connection = ora.connect(user=username, password=password, dsn=dsn)
        cursor = connection.cursor()

        query = """
            SELECT MSISDN_C
            FROM BIS.TEASR_PREFIX_MSISDN
        """
        cursor.execute(query)
        result = cursor.fetchall()

        return result

    except ora.DatabaseError as e:
        error, = e.args
        logging.error(f"Ошибка базы данных: {error.code}, {error.message}")
        print(f"Ошибка базы данных: {error.code}, {error.message}")
        return None
    except Exception as e:
        logging.error(f"Ошибка: {e}")
        print(f"Ошибка: {e}")
        return None
    finally:
        if cursor is not None:
            cursor.close()
        if connection is not None:
            connection.close()